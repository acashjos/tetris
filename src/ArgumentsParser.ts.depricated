
import path = require("path");
import {Paint,Throw} from "./Errors";
import Repository from "./repositoryTracker";
// CLI.Log(input)

enum Actions {
	create, remove,
}

export default class ArgumentsParser{
	private rawInputs: string[];
	private target: string;
	private action: Actions = Actions.create;

	constructor(input: string | string[], argvOffset?: number){
		if (typeof input === "string") {input = input.split(" ").filter( (x) => !!x); }
		this.rawInputs = input;

		// Identify action
		argvOffset = argvOffset || 2; // skip `argvOffset` params from begining
		switch (this.rawInputs[argvOffset]){
			case "--help" :
			case "-h"     :
				ArgumentsParser.printHelp(); break;

			case "--remove":
			case "-r"     :
				this.action = Actions.remove;
				argvOffset++; break;

			default       :
				if (/^-/.test(this.rawInputs[argvOffset])) {Throw(); }
		}

		if (!this.rawInputs[argvOffset]) { Throw(); }
		this.target = this.rawInputs[argvOffset];

		/*if(this.rawInputs.length<4)
			throw("wrong syntax")

		var flags= this.rawInputs[2]
		var dir
		var tetro= this.rawInputs[4]

		if(!tetro){
			dir=process.cwd()
			tetro=this.rawInputs[3]
		}
		else
			dir=path.resolve(process.cwd(),this.rawInputs[3])

		// CLI.Log(process.cwd(),this.rawInputs[3],path.resolve(process.cwd(),this.rawInputs[3]))
		flags=flags.replace(/^-/,"")



		if(dir==path.resolve(dir,"../")+"/"+tetro)
			CLI.Log("included")
		else
			dir=dir+"/"+tetro
		try{
			CLI.Log(fs.statSync(dir))
		}
		catch(e){
			fs.mkdirSync(dir);
		}*/

	}

	public getTarget(): string{
		return this.target;
	}
	public getTargetRecipe(){
		return Repository.getRecipe(this.target);
	}

	public static printHelp(){
		let out = Paint(`\n%bu_Br   Prints this section\n\n`, "--help   -h");
		out += Paint(`%bu_Br   \n`, "{recipeName} [param1 [param2 [...]  ]");
		out += Paint(`              Runs a tetro injection\n\n`);
		out += Paint(`%bu_Br   \n`, "--revert   -r {recipeName}");
		out += `              Reverts a tetro injection\n`;
		out += `              This will throw an error of the tetro doesn"t have a revert strategy\n`;
		CLI.Log(out);
		process.exit(0);
	}

	public async loadParams(params){
		return {};
	}
}
